#!/usr/bin/env python3
import asyncio
from grader.tcp import Servidor
import re

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def sair(conexao):
    print('> Connection closed')

    if conexao in missingData:
        del missingData[conexao]

    if conexao in users:
        currentUser = users[conexao]

        channelsList = filter(
            lambda channel: currentUser in channels[channel], list(channels.keys()))

        for channel in channelsList:
            for user in channels[channel]:
                if not user == currentUser:
                    response = b':%s QUIT :Connection closed\r\n' % currentUser
                    memberConnection = getConnectionsByUser(user)[0]
                    memberConnection.enviar(response)

            channels[channel].remove(currentUser)
            channels[channel].sort()

        del users[conexao]

    conexao.fechar()

def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)

    print('! Data received: "%s"' % dados)

    messages = parseMessages(conexao, dados)

    for message in messages:
        if not len(message): continue

        messageType, messageData = message.split(b' ', 1)

        print('> Processing message. Type: "%s" Data: "%s"' % (messageType, messageData))
        handleMessage(conexao, messageType, messageData)

missingData = {}

def parseMessages(conexao, dados):
    global missingData

    # 'linha\r\n'             -> ('linha', '')
    # 'linha1\r\nlinha2\r\n   -> ('linha1', 'linha2', '')
    # 'a 1\r\nlinha 2\r\nli'  -> ('a 1', 'linha 2', 'li')
    # 'lin' ... 'h' ... 'a\r\n'
    messages = dados.split(b'\r\n')

    # inicializa o dicionario para a conexão atual
    if not conexao in missingData:
      missingData[conexao] = b''

    # verifica se existe dados residuais da conexão atual
    if not missingData[conexao] == b'':
       messages[0] = missingData[conexao] + messages[0]
       missingData[conexao] = b''

    # verifica se existe dados residuais na última mensagem
    if not messages[-1] == b'':
        missingData[conexao] = missingData[conexao] + messages[-1]
        messages[-1] = b''

    # verifica se os dados residuais estão completos
    if missingData[conexao].endswith(b'\r\n'):
      messages.insert(0, missingData[conexao])
      missingData[conexao] = b''

    # deleta do dicionario dados residuais vazios
    if missingData[conexao] == b'':
        del missingData[conexao]

    return messages

users = {}

channels = {}

def handleMessage(conexao, messageType, messageData):
    global users

    if messageType == b'PING':
        response = b':server PONG server :%s\r\n' % messageData
        conexao.enviar(response)
        return

    elif messageType == b'NICK':
        if not validar_nome(messageData):
            response = b':server 432 * %s :Erroneous nickname\r\n' % messageData
            conexao.enviar(response)
            return

        # define o apelido_atual
        oldNick = users[conexao] if conexao in users else b'*'

        # verifica se o nick já está sendo usado
        if usingNick(messageData):
        # if re.search("{messageData}", "{list(users.values())}", re.IGNORECASE) != None:
            response = b':server 433 %s %s :Nickname is already in use\r\n' % (oldNick, messageData)
            conexao.enviar(response)
            return

        # verifica se o usuário já existe
        
        if conexao in users:
            response = b':%s NICK %s\r\n' % (oldNick, messageData)
            conexao.enviar(response)
        else:
            response1 = b':server 001 %s :Welcome\r\n' % messageData
            conexao.enviar(response1)
            response2 = b':server 422 %s :MOTD File is missing\r\n' % messageData
            conexao.enviar(response2)

        
        users[conexao] = messageData
        return
    
    elif messageType == b'PRIVMSG':
        target, content = messageData.split(b' :', 1)

        currentUser = users[conexao]

        targetConnections = getConnectionsByChannel(currentUser, target) if target.startswith(b'#') else getConnectionsByUser(target)

        for targetConnection in targetConnections:
            response = b':%s PRIVMSG %s :%s\r\n' % (users[conexao], target, content)
            targetConnection.enviar(response)

        return

    elif messageType == b'JOIN':
        channel = messageData
        if not channel.startswith(b'#') or not validar_nome(channel[1:]):
            response = b':server 403 %s :No such channel\r\n' % channel
            conexao.enviar(response)
            return

        currentUser = users[conexao]

        if not channel in channels:
            channels[channel] = []

        channels[channel].append(currentUser)
        channels[channel].sort()

        for channelUser in channels[channel]:
            response = b':%s JOIN :%s\r\n' % (currentUser, channel)
            channelUserConnection = getConnectionsByUser(channelUser)[0]
            channelUserConnection.enviar(response)

        defaultResponse = b':server 353 %s = %s :\r\n' % (currentUser, channel)
        maxNamesLength = 512 - len(defaultResponse)

        membersMessages = [b'']

        for channelUser in channels[channel]:
            nextValue = (membersMessages[-1] + b' ' + channelUser).strip()
            if len(nextValue) < maxNamesLength:
                membersMessages[-1] = nextValue
            else:
                membersMessages.append(channelUser)

        for membersMessage in membersMessages:
            response = b':server 353 %s = %s :%s\r\n' % (currentUser, channel, membersMessage)
            conexao.enviar(response)

        lastResponse = b':server 366 %s %s :End of /NAMES list.\r\n' % (currentUser, channel)
        conexao.enviar(lastResponse)


        return

    elif messageType == b'PART':
      channel = messageData.split(b' ', 1)[0]

      # verificar se o nome do canal é válido
      if not channel.startswith(b'#') or not validar_nome(channel[1:]):
            response = b':server 403 %s :No such channel\r\n' % channel
            conexao.enviar(response)
            return

      currentUser = users[conexao]

      if not channel in channels:
          return
      if not currentUser in channels[channel]:
          return

      
      # mensagem para avisar que um membro saiu do canal
      for channelUser in channels[channel]:
          response = b':%s PART %s\r\n' % (currentUser, channel)
          channelUserConnection = getConnectionsByUser(channelUser)[0]
          channelUserConnection.enviar(response)

      # remover membro do canal
      channels[channel].remove(currentUser)
      channels[channel].sort()
      
      return

    else:
        print('? Message type not implemented: "%s"' % messageType)

def usingNick(user):
    return user.lower() in [x.lower() for x in list(users.values())]

def getConnectionsByChannel(currentUser, maybeChannel):
    connections = []

    channelsListLowerCase = [x.lower() for x in list(channels.keys())]
    channelIndex = channelsListLowerCase.index(maybeChannel.lower())
    channel = list(channels.keys())[channelIndex]

    if channel in channels:
        for user in channels[channel]:
            if not user == currentUser:
                userConnection = getConnectionsByUser(user)
                connections.append(userConnection[0])

    return connections

# it will return an array with 0 or 1 connection
def getConnectionsByUser(user):
    if not usingNick(user):
        return []

    userLowerCase = user.lower()
    connections = list(users.keys())
    usersListLowerCase = [x.lower() for x in list(users.values())]
    userConnection = connections[usersListLowerCase.index(userLowerCase)]
    return [userConnection]

def conexao_aceita(conexao):
    print('> New connection')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)

print('> Servidor started')

asyncio.get_event_loop().run_forever()
